/* eslint-disable class-methods-use-this */
const RedisSMQ = require("rsmq");
const logger = require("../../config/winston-config");

let redisQueue = null;

class RedisQueue {
	constructor() {
		this.rsmq = new RedisSMQ({
			host: process.env.REDIS_HOST_NODE_FIRST,
			port: process.env.REDIS_PORT,
			ns: "rsmq"
		});
	}

	sendMessage(event) {
		this.rsmq.sendMessage(
			{ qname: "app_events", message: event, delay: 2 },
			(err, resp) => {
				if (err) {
					logger.error(err);
					return;
				}
				const msg = JSON.parse(event);
				logger.info(
					`Message ${msg} sent at : ${new Date().toISOString()}`
				);
			}
		);
	}
}

function getRedisQueue() {
	if (!redisQueue) {
		redisQueue = new RedisQueue();
		Object.freeze(redisQueue);

		redisQueue.rsmq.listQueues((err, queues) => {
			if (err) {
				logger.error(err);
				return;
			}
			if (!queues.includes("app_events")) {
				redisQueue.rsmq.createQueue({ qname: "app_events" }, (err, resp) => {
					if (err) {
						logger.error(err);
						return;
					}
					if (resp === 1) {
						logger.info("Queue created for app events");
					}
				});
			}
		});
	}
	return redisQueue;
}

module.exports = getRedisQueue;
