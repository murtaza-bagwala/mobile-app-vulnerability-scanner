const faker = require('faker');
const mongoose = require('mongoose');

const BcryptPasswordGenerator = require('../../app/utils/bcrypt-password-generator');

class UserFactory {
  static create(email, psw = 'Johnpass', accountVerified, sociaLoginId, phoneNo = '') {
    const bcrypt = BcryptPasswordGenerator.generatePassword(psw);
    const userId = mongoose.Types.ObjectId().toString();
    return {
      _id: userId,
      emailAddress: email || faker.internet.email(),
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      phoneNo: phoneNo || faker.phone.phoneNumber(),
      birthDate: '1991-07-10',
      username: 'test23@gmail.com',
      services: { password: { bcrypt } },
      password: psw,
      email: email || faker.internet.email(),
      accountVerified: accountVerified || false,
      needsManualKyc: false,
      publicId: 'XYSIA',
      sociaLoginId: sociaLoginId || null,
      type: 'username',
    };
  }

  static createWithEmail(email, resetPasswordToken, resetPasswordExpires) {
    const password = 'P@55word';
    const bcrypt = BcryptPasswordGenerator.generatePassword(password);
    const userId = mongoose.Types.ObjectId().toString();
    return {
      _id: userId,
      emailAddress: email || faker.internet.email(),
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      phoneNo: faker.phone.phoneNumber(),
      birthDate: '1991-07-10',
      username: 'testmail',
      services: { password: { bcrypt } },
      password,
      accountVerified: false,
      needsManualKyc: false,
      publicId: faker.random.alphaNumeric(6),
      type: 'username',
      resetPasswordToken,
      resetPasswordExpires,
    };
  }

  static createWithGmail() {
    const password = faker.internet.password();
    const bcrypt = BcryptPasswordGenerator.generatePassword(password);
    const userId = mongoose.Types.ObjectId().toString();
    return {
      _id: userId,
      emailAddress: faker.internet.email(),
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      phoneNo: faker.phone.phoneNumber(),
      birthDate: '1991-07-10',
      username: faker.internet.userName(),
      services: { password: { bcrypt } },
      password,
      email: faker.internet.email(),
      accountVerified: false,
      needsManualKyc: false,
      publicId: 'XYSIT',
      type: 'gmail',
    };
  }

  static createUserSignRequest(email, password, signupStrategy, username) {
    return {
      email: email || faker.internet.email(),
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      phoneNo: faker.phone.phoneNumber(),
      birthDate: '1991-07-10',
      username: username || faker.name.findName(),
      password,
      signupStrategy,
    };
  }

  static userPreferences() {
    return {
      favouriteSports: faker.lorem.words(),
      favouriteTeams: faker.lorem.words(),
      favouritePlayers: faker.lorem.words(),
      playAmount: [faker.commerce.price(), faker.commerce.price()],
      paidStrategy: faker.lorem.words(),
    };
  }
}
module.exports = UserFactory;
