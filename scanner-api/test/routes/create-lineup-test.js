const chai = require('chai');
const chaiHttp = require('chai-http');
const jwt = require('jsonwebtoken');

// eslint-disable-next-line no-unused-vars
const should = chai.should();

const app = require('../../app/server');

const mongoDB = require('../../app/services/mongodb-service');
const Contest = require('../factories/contest');
const User = require('../factories/user-factory');
const { COLLECTIONS } = require('../../app/utils/constant');


chai.use(chaiHttp);

describe('Create Lineup Tests', () => {
  const contest = Contest.create(new Date(), true, true);
  const draftedContest = Contest.create(new Date(), false, false);
  const user = User.create();
  const contestDate = new Date();
  contestDate.setDate(contestDate.getDate() + 1);
  const futureContest = Contest.create(contestDate, true, false);
  const currentContest = Contest.create(new Date(), true, false);

  let userId = null;
  let contestId = null;
  let draftedContestId = null;
  let futureContestId = null;
  let currentContestId = null;

  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection(COLLECTIONS.CONTESTS).insertMany(
          [contest, draftedContest, futureContest, currentContest], (err, result) => {
            if (err) done(err);
            contestId = result.ops[0]._id;
            draftedContestId = result.ops[1]._id;
            futureContestId = result.ops[2]._id;
            currentContestId = result.ops[3]._id;
            mongoDB.dbInstance().collection(COLLECTIONS.USERS)
              .insertOne(user, (error, userResult) => {
                if (error) done(error);
                userId = userResult.insertedId;
                done();
              });
          },
        );
      });
    });
  });

  it('returns status as 410 if no contest found', (done) => {
    const lineupParams = {
      entryFee: 100,
      currencyIsoCode: 'USD',
      contestId: '5e12fdf10529a5164a808e90',
      selectedNumber: 100,
      isDrafted: true,
    };

    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).post('/users/lineups')
      .set('Authorization', `Bearer ${token}`)
      .send(lineupParams)
      .end((err, result) => {
        result.should.have.status(410);
        result.body.message.should.equal('This contest no longer exists.');
        result.body.code.should.equal('contest.not_found');
        done();
      });
  });

  it('returns status as 403 if contest is already started', (done) => {
    const lineupParams = {
      entryFee: 100,
      currencyIsoCode: 'USD',
      contestId,
      selectedNumber: 100,
      isDrafted: true,
    };

    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).post('/users/lineups')
      .set('Authorization', `Bearer ${token}`)
      .send(lineupParams)
      .end((err, result) => {
        result.should.have.status(403);
        result.body.message.should.equal('You cannot join a contest after it has started.');
        result.body.code.should.equal('contest.started');
        done();
      });
  });

  it('returns status as 403 if entries are closed', (done) => {
    const lineupParams = {
      entryFee: 100,
      currencyIsoCode: 'USD',
      contestId: draftedContestId,
      selectedNumber: 100,
      isDrafted: true,
    };

    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).post('/users/lineups')
      .set('Authorization', `Bearer ${token}`)
      .send(lineupParams)
      .end((err, result) => {
        result.should.have.status(403);
        result.body.message.should.equal('Entries are closed for this contest. Please check for new contests.');
        result.body.code.should.equal('contest.closed.entries');
        done();
      });
  });

  it('returns status as 403 if entries are yet to be opened', (done) => {
    const lineupParams = {
      entryFee: 100,
      currencyIsoCode: 'USD',
      contestId: futureContestId,
      selectedNumber: 100,
      isDrafted: true,
    };

    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).post('/users/lineups')
      .set('Authorization', `Bearer ${token}`)
      .send(lineupParams)
      .end((err, result) => {
        result.should.have.status(403);
        result.body.message.should.equal('This draft has not opened yet!.');
        result.body.code.should.equal('contest.opened.not.entries');
        done();
      });
  });

  it('returns status as 201 if lineup is created', (done) => {
    const lineupParams = {
      entryFee: 100,
      currencyIsoCode: 'USD',
      contestId: currentContestId,
      selectedNumber: 100,
      isDrafted: true,
    };

    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).post('/users/lineups')
      .set('Authorization', `Bearer ${token}`)
      .send(lineupParams)
      .end((err, result) => {
        result.should.have.status(201);
        result.body.createdLineup.isDrafted.should.equal(true);
        result.body.code.should.equal('lineup.created');
        done();
      });
  });
});
