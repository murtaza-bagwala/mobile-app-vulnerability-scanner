const chai = require('chai');
const chaiHttp = require('chai-http');

const should = chai.should();
const nock = require('nock');
const faker = require('faker');
const app = require('../../app/server');

const mongoDB = require('../../app/services/mongodb-service');
const userFactory = require('../factories/user-factory');
const User = require('../factories/user-factory');

const baseUrl = process.env.SMTM_BASE_URL;

chai.use(chaiHttp);

describe('Create User Service Tests', () => {
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        done();
      });
    });
  });
  it('gives an error if password format is incorrect', (done) => {
    const user = userFactory.create();
    const expoToken = faker.random.alphaNumeric(10);
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(400);
        should.exist(result.error);
        result.body.status.should.equal(400);
        result.body.code.should.equal('user.invalid.password_format');
        result.body.message.should.equal('Invalid format of the password.');
        done();
      });
  });

  afterEach(() => {
    nock.cleanAll();
  });

  it('creates a user and returns a created user', (done) => {
    const user = User.createUserSignRequest('johnMathews@xyz.com', 'johnpass@');
    const expoToken = faker.random.alphaNumeric(10);
    nock(baseUrl).post('/users').reply(200, { id: 'public' });
    nock(baseUrl).post('/appInstalls').reply(200, { id: 'xyz' });
    nock(baseUrl).patch('/appInstalls/xyz').reply(200, {});
    nock(baseUrl).patch(`/users/public/pushTokens/${expoToken}`).reply(200, {});
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(201);
        result.body.should.be.an('object');
        result.body.createdUser.emailAddress.should.equal(user.email.toLowerCase());
        result.body.createdUser.accountVerified.should.equal(false);
        result.body.createdUser.needsManualKyc.should.equal(false);
        result.body.createdUser.emails[0].address.should.equal(user.email.toLowerCase());
        result.body.createdUser.emails[0].verified.should.equal(false);
        done();
      });
  });

  it('returns an error if smtm api returns an error', (done) => {
    const user = User.createUserSignRequest('johnMathews1@xyz.com', 'johnpass@');
    const expoToken = faker.random.alphaNumeric(10);
    nock(baseUrl).post('/users').replyWithError('Unable to create User');
    nock(baseUrl).post('/appInstalls').reply(200, { id: 'xyz' });
    nock(baseUrl).patch('/appInstalls/xyz').reply(200, {});
    nock(baseUrl).patch(`/users/public/pushTokens/${expoToken}`).reply(200, {});
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(500);
        should.exist(result.error);
        result.body.message.should.equal('Unable to create User');
        done();
      });
  });

  it('returns an error if smtm api returns an success with an error message', (done) => {
    const user = User.createUserSignRequest('johnMathews2@xyz.com', 'johnpass@');
    const expoToken = faker.random.alphaNumeric(10);
    nock(baseUrl).post('/users').reply(200, {});
    nock(baseUrl).post('/appInstalls').reply(200, { id: 'xyz' });
    nock(baseUrl).patch('/appInstalls/xyz').reply(200, {});
    nock(baseUrl).patch(`/users/public/pushTokens/${expoToken}`).reply(200, {});
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(500);
        should.exist(result.error);
        result.body.message.should.equal('Unable to create a User in SMTM');
        done();
      });
  });


  it('returns an error if smtm /appInstalls api returns an error', (done) => {
    const user = User.createUserSignRequest('johnMathews6@xyz.com', 'johnpass@');
    const expoToken = faker.random.alphaNumeric(10);
    nock(baseUrl).post('/users').reply(200, { id: 'xyz' });
    nock(baseUrl).post('/appInstalls').replyWithError('Unable to create AppInstall');
    chai.request(app).post('/users').set('Authorization', 'Bearer x')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(500);
        should.exist(result.error);
        result.body.message.should.equal('Unable to create AppInstall');
        done();
      });
  });

  it('returns an error if all the required headers are missing', (done) => {
    const user = User.createUserSignRequest('johnMathews3@xyz.com', 'johnpass@');
    nock(baseUrl).post('/users').reply(200, { id: 'xyz' });
    nock(baseUrl).post('/appInstalls').reply(200, { id: 'xyz' });
    chai.request(app).post('/users').set('Authorization', 'Bearer x')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .send(user)
      .end((err, result) => {
        result.should.have.status(400);
        should.exist(result.error);
        result.body.message.should.equal('User Device Info Missing');
        result.body.code.should.equal('user.missing.device_info');
        done();
      });
  });

  it('returns true if user email already exists', (done) => {
    chai.request(app).get('/users/username-or-email/exists').query({ email: 'johnMathews@xyz.com' })
      .end((err, result) => {
        result.should.have.status(409);
        result.body.should.be.an('object');
        result.body.code.should.be.equal('user.exists.email');
        result.body.userEmailExists.should.equal(true);
        done();
      });
  });

  it('gives an error if any of the required fields are missing', (done) => {
    const user = { email: 'johnMathews18@xyz.com' };
    const expoToken = faker.random.alphaNumeric(10);
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(400);
        should.exist(result.error);
        result.body.message.should.equal('Invalid user details');
        done();
      });
  });

  it('gives an error if password is missing in case of Normal Signup', (done) => {
    const user = User.createUserSignRequest('johnMathews19@xyz.com');
    const expoToken = faker.random.alphaNumeric(10);
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(400);
        should.exist(result.error);
        result.body.status.should.equal(400);
        result.body.message.should.equal('Invalid format of the password.');
        result.body.code.should.equal('user.invalid.password_format');
        done();
      });
  });

  it('returns success if password is missing in case of Social Signup', (done) => {
    const user = User.createUserSignRequest('johnMathews19@xyz.com', null, 'social', 'john');
    const expoToken = faker.random.alphaNumeric(10);
    nock(baseUrl).post('/users').reply(200, { id: 'public' });
    nock(baseUrl).post('/appInstalls').reply(200, { id: 'xyz' });
    nock(baseUrl).patch('/appInstalls/xyz').reply(200, {});
    nock(baseUrl).patch(`/users/public/pushTokens/${expoToken}`).reply(200, {});
    chai.request(app).post('/users')
      .set('deviceId', 'xyz')
      .set('osType', 'browser')
      .set('resolution', '122 X 230')
      .set('appversion', '1.0')
      .set('osversion', '2.0')
      .set('devicemake', 'google')
      .set('devicemodel', '4.23')
      .set('expotoken', expoToken)
      .set('isVirtual', 'false')
      .send(user)
      .end((err, result) => {
        result.should.have.status(201);
        result.body.should.be.an('object');
        result.body.createdUser.emailAddress.should.equal(user.email.toLowerCase());
        done();
      });
  });
});

describe('Check User already exists Tests', () => {
  it('returns true if user name already exists', (done) => {
    chai.request(app).get('/users/username-or-email/exists').query({ username: 'john'.toUpperCase() })
      .end((err, result) => {
        result.should.have.status(409);
        result.body.should.be.an('object');
        result.body.code.should.be.equal('user.exists.username');
        result.body.usernameExists.should.equal(true);
        done();
      });
  });

  it('returns true if user email already exists', (done) => {
    chai.request(app).get('/users/username-or-email/exists')
      .query({ email: 'johnMathews@xyz.com'.toUpperCase() }).end((err, result) => {
        result.should.have.status(409);
        result.body.should.be.an('object');
        result.body.code.should.be.equal('user.exists.email');
        result.body.userEmailExists.should.equal(true);
        done();
      });
  });

  it('returns false if user email does not exists', (done) => {
    chai.request(app).get('/users/username-or-email/exists').query({ email: 'johnMathews111@xyz.com' }).end((err, result) => {
      result.should.have.status(200);
      result.body.should.be.an('object');
      result.body.code.should.be.equal('success');
      result.body.userEmailExists.should.equal(false);
      done();
    });
  });

  it('gives an error if any of the required fields are missing', (done) => {
    chai.request(app).get('/users/username-or-email/exists').query().end((err, result) => {
      result.should.have.status(400);
      should.exist(result.error);
      result.body.message.should.equal('Invalid user details');
      done();
    });
  });
});
