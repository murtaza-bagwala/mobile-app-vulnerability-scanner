const chai = require('chai');
const chaiHttp = require('chai-http');
const jwt = require('jsonwebtoken');

// eslint-disable-next-line no-unused-vars
const should = chai.should();

const app = require('../../app/server');

const mongoDB = require('../../app/services/mongodb-service');
const Contest = require('../factories/contest');
const Entrant = require('../factories/entrant');
const User = require('../factories/user-factory');
const { COLLECTIONS } = require('../../app/utils/constant');


chai.use(chaiHttp);

describe('Fetch Lineup Tests', () => {
  const user = User.create();
  const contestDate = new Date();
  contestDate.setDate(contestDate.getDate() + 1);
  const startedContest = Contest.create(contestDate, true, true);
  const anotherStartedContest = Contest.create(contestDate, true, true);
  const currentContest = Contest.create(new Date(), true, false);


  const entrantForStartedContest = Entrant.create(startedContest, true);
  const entrantForanotherStartedContest = Entrant.create(anotherStartedContest, true);
  const entrantForCurrentContest = Entrant.create(currentContest, true);
  const entrantForAnotherCurrentContest = Entrant.create(currentContest, false);

  let userId = null;

  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection(COLLECTIONS.USERS)
          .insertOne(user, (error, userResult) => {
            if (error) done(error);
            userId = userResult.insertedId;
            entrantForStartedContest.userId = userId;
            entrantForanotherStartedContest.userId = userId;
            entrantForCurrentContest.userId = userId;
            mongoDB.dbInstance().collection(COLLECTIONS.CONTESTS).insertMany(
              [startedContest, anotherStartedContest, currentContest], (err) => {
                if (err) done(err);
                mongoDB.dbInstance().collection(COLLECTIONS.ENTRANTS).insertMany(
                  [entrantForStartedContest, entrantForanotherStartedContest,
                    entrantForCurrentContest, entrantForAnotherCurrentContest],
                  (entrantErr) => {
                    if (entrantErr) done(entrantErr);
                    done();
                  },
                );
              },
            );
          });
      });
    });
  });

  it('returns status as 200 when contests are fetched', (done) => {
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });

    chai.request(app).get('/users/lineups/')
      .set('Authorization', `Bearer ${token}`)
      .send()
      .end((err, result) => {
        result.should.have.status(200);
        result.body.entrants.length.should.equal(1);
        result.body.entrants[0].title.should.equal(entrantForCurrentContest.title);
        result.body.code.should.equal('success');
        done();
      });
  });
});
