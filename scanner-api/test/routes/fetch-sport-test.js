const chai = require('chai');
const chaiHttp = require('chai-http');

// eslint-disable-next-line no-unused-vars
const should = chai.should();

const app = require('../../app/server');

const mongoDB = require('../../app/services/mongodb-service');
const Sport = require('../factories/sport');

chai.use(chaiHttp);

describe('Create User Service Tests', () => {
  const sports = [];
  sports.push(Sport.create('Baseball', 'mlb'));
  sports.push(Sport.create('Football', 'nfl'));
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection('sports').insertMany(sports);
        done();
      });
    });
  });

  it('returns status as 404 if no record found', (done) => {
    chai.request(app).get('/sports').query({ name: 'z' })
      .end((err, result) => {
        result.should.have.status(404);
        result.body.message.should.equal('Unable to find Sports');
        result.body.code.should.equal('record.missing');
        done();
      });
  });

  it('returns status as 200 if any sport is found', (done) => {
    chai.request(app).get('/sports').query({ name: 'Base' })
      .end((err, result) => {
        result.should.have.status(200);
        result.body.data.should.be.an('array');
        result.body.data[0].name.should.equal('Baseball');
        done();
      });
  });

  it('returns status as 200  and all the available sports if name is not specified', (done) => {
    chai.request(app).get('/sports').end((err, result) => {
      result.should.have.status(200);
      result.body.data.should.be.an('array');
      result.body.data.length.should.equal(2);
      done();
    });
  });
});
