const chai = require('chai');
const chaiHttp = require('chai-http');
const faker = require('faker');

const should = chai.should();
const { expect } = chai;
const app = require('../../app/server');

const { LOGIN_TYPE, COLLECTIONS } = require('../../app/utils/constant');
const userFactory = require('../factories/user-factory');
const mongoDB = require('../../app/services/mongodb-service');

chai.use(chaiHttp);

describe('Login Service Tests', () => {
  it('returns status as 400 if user does not exists', (done) => {
    const loginCredentials = {
      username: faker.internet.email(),
      password: faker.internet.password(),
      loginstrategy: LOGIN_TYPE.USERNAME,
    };

    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.message.should.equal('Invalid username or password');
      done();
    });
  });


  it('gives an error while user logins with facebook strategy and invalid fb token', (done) => {
    const loginCredentials = {
      facebookToken: faker.random.alphaNumeric(),
      loginstrategy: LOGIN_TYPE.FACEBOOK,
      username: faker.internet.email(),
    };

    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.error);
      result.error.text.should.equal('Invalid User');
      done();
    });
  });

  it('returns status as 400 if any of the required fields are missing', (done) => {
    const loginCredentials = { };
    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.error);
      result.body.message.should.equal('User does not exist');
      done();
    });
  });
  const userData = {};
  before((done) => {
    const user = userFactory.create();
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection(COLLECTIONS.USERS).insertOne(user, (err, result) => {
          if (err) done(err);
          Object.assign(userData, result.ops[0]);
          done();
        });
      });
    });
  });

  it('returns status as 400 if user does not exists', (done) => {
    const loginCredentials = {
      username: userData.username || userData.emailAddress,
      password: faker.internet.password(),
      loginstrategy: LOGIN_TYPE.USERNAME,
    };
    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.message.should.equal('Invalid username or password');
      done();
    });
  });

  it('login  with gmail strategy', (done) => {
    const loginCredentials = {
      loginstrategy: LOGIN_TYPE.GMAIL,
      gmailId: faker.random.number(),
      username: 'test23@gmail.com',
    };

    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      expect(result).to.have.status(200);
      should.exist(result.body);
      result.body.should.be.an('object');
      expect(result.body.message).to.be.equal('Token Updated Successfully');
      should.exist(result.body.data);
      const loginData = result.body.data;
      loginData.username.should.equal(loginCredentials.username);
      loginData.sociaLoginId.should.equal(loginCredentials.gmailId);
      loginData.type.should.equal(loginCredentials.loginstrategy);
      should.exist(loginData.token);
      done();
    });
  });

  it('login with username strategy', (done) => {
    const loginCredentials = {
      username: userData.username || userData.emailAddress,
      password: 'Johnpass',
      loginstrategy: LOGIN_TYPE.USERNAME,
    };

    chai.request(app).post('/users/login').send(loginCredentials).end((err, result) => {
      if (err) done(err);
      result.should.have.status(200);
      should.exist(result.body);
      result.body.should.be.an('object');
      should.exist(result.body.data);
      const loginData = result.body.data;
      loginData.username.should.equal(loginCredentials.username);
      loginData.type.should.equal(loginCredentials.loginstrategy);
      should.exist(loginData.token);
      done();
    });
  });
});
