const chai = require('chai');
const chaiHttp = require('chai-http');

const jwt = require('jsonwebtoken');
const faker = require('faker');
const app = require('../../app/server');


// eslint-disable-next-line no-unused-vars
const should = chai.should();

const mongoDB = require('../../app/services/mongodb-service');
const User = require('../factories/user-factory');


chai.use(chaiHttp);

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

describe('Logout User', () => {
  const user = User.create();
  let userId = '';
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection('users').insertOne(user, (err, result) => {
          userId = result.insertedId;
          done();
        });
      });
    });
  });

  it('returns status as 401 if no token is passed', (done) => {
    chai.request(app).post('/users/logout').send().end((err, result) => {
      result.should.have.status(401);
      result.body.message.should.equal('Access denied. No token provided.');
      done();
    });
  });

  it('returns status as 404 if  user does not exist', (done) => {
    const token = jwt.sign({ sub: faker.random.number }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).post('/users/logout').set('Authorization', `Bearer ${token}`).send()
      .end((err, result) => {
        result.should.have.status(404);
        result.body.message.should.equal('Invalid Token');
        result.body.code.should.equal('error');
        done();
      });
  });

  it('returns status as 200 if user gets logged out successfully', (done) => {
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1' });
    sleep(1000);
    chai.request(app).post('/users/logout').set('Authorization', `Bearer ${token}`).send()
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('User token deleted Successfully');
        result.body.code.should.equal('user.deleted.token');
        done();
      });
  });
});
