const chai = require('chai');
const chaiHttp = require('chai-http');
const faker = require('faker');
const nock = require('nock');

const should = chai.should();
const app = require('../../app/server');
const userFactory = require('../factories/user-factory');
const mongoDB = require('../../app/services/mongodb-service');
const {
  COLLECTIONS,
} = require('../../app/utils/constant');

const baseUrl = process.env.SMTM_BASE_URL;

chai.use(chaiHttp);

describe('Reset Password Service Tests', () => {
  it('gives an error if email field is missing', (done) => {
    const mailAddr = { };
    chai.request(app).post('/users/forgot-password').send(mailAddr).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.error);
      result.error.text.should.equal('invalid email');
      done();
    });
  });

  const userData = {};
  const userValidLinkData = {};
  const userValidLinkData2 = {};
  const userExpiredLinkData = {};
  const userExpiredLinkData2 = {};
  const socialUserData = {};

  before((done) => {
    const dayInSeconds = Number(process.env.LINK_EXPIRATION);

    const user = userFactory.create();
    const socialUser = userFactory.createWithGmail();

    const validTime = Date.now() + dayInSeconds;
    const userValidLink = userFactory.createWithEmail(
      'valid_link@test.com',
      faker.random.alphaNumeric(10),
      validTime,
    );

    const userValidLink2 = userFactory.createWithEmail(
      'valid_link@test.com',
      faker.random.alphaNumeric(10),
      validTime,
    );

    const expiredTime = Date.now() - dayInSeconds;
    const userExpiredLink = userFactory.createWithEmail(
      'invalid_link@test.com',
      faker.random.alphaNumeric(10),
      expiredTime,
    );

    const userExpiredLink2 = userFactory.createWithEmail(
      'invalid_link@test.com',
      faker.random.alphaNumeric(10),
      expiredTime,
    );

    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection(COLLECTIONS.USERS)
          .insertMany([
            user, userValidLink, userValidLink2,
            userExpiredLink, userExpiredLink2, socialUser,
          ], (err, result) => {
            if (err) done(err);
            Object.assign(userData, result.ops[0]);
            Object.assign(userValidLinkData, result.ops[1]);
            Object.assign(userValidLinkData2, result.ops[2]);
            Object.assign(userExpiredLinkData, result.ops[3]);
            Object.assign(userExpiredLinkData2, result.ops[4]);
            Object.assign(socialUserData, result.ops[5]);
            done();
          });
      });
    });
  });

  describe('When user is present and requests reset password', () => {
    it('sends an email to reset password', (done) => {
      const mailAddr = { email: userData.emailAddress };
      nock(baseUrl).post('/transactional-email').reply(200, {});
      chai.request(app).post('/users/forgot-password').send(mailAddr).end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        should.exist(result.body);
        result.body.status.should.equal(200);
        result.body.code.should.equal('user.email.success');
        result.body.message.should.equal('Instructions to reset your password is sent by email');
        result.body.should.be.an('object');
        done();
      });
    });

    describe('when reset password link is valid', () => {
      it('should give success', (done) => {
        const obj = {
          email: 'valid_link@test.com',
          token: userValidLinkData2.resetPasswordToken,
        };
        chai.request(app).post('/users/validate-reset-link').send(obj).end((err, result) => {
          if (err) done(err);
          result.should.have.status(200);
          should.exist(result.body);
          result.body.status.should.equal(200);
          done();
        });
      });
    });

    describe('when reset password link is valid', () => {
      it('it resets the password', (done) => {
        const obj = {
          email: 'valid_link@test.com',
          password: 'J0hnPass',
          token: userValidLinkData.resetPasswordToken,
        };
        chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
          if (err) done(err);
          result.should.have.status(204);
          done();
        });
      });
    });

    describe('when reset password link has expired', () => {
      it('does not reset password', (done) => {
        const obj = {
          email: 'invalid_link@test.com',
          password: 'J0hnPass',
          token: userExpiredLinkData.resetPasswordToken,
        };

        chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
          if (err) done(err);
          result.should.have.status(401);
          should.exist(result.body);
          result.body.status.should.equal(401);
          result.body.should.be.an('object');
          result.body.code.should.equal('user.invalid.password_reset_link');
          result.body.message.should.equal('Password reset link is invalid or has expired');
          done();
        });
      });
    });

    describe('when reset password link has expired', () => {
      it('says its invalid', (done) => {
        const obj = {
          email: 'invalid_link@test.com',
          password: 'J0hnPass',
          token: userExpiredLinkData2.resetPasswordToken,
        };

        chai.request(app).post('/users/validate-reset-link').send(obj).end((err, result) => {
          if (err) done(err);
          result.should.have.status(401);
          should.exist(result.body);
          result.body.status.should.equal(401);
          result.body.should.be.an('object');
          result.body.code.should.equal('user.invalid.password_reset_link');
          result.body.message.should.equal('Password reset link is invalid or has expired');
          done();
        });
      });
    });
  });

  describe('When an email is not registered', () => {
    it('sends an email to register', (done) => {
      const mailAddr = { email: faker.internet.email() };
      nock(baseUrl).post('/transactional-email').reply(200, {});
      chai.request(app).post('/users/forgot-password').send(mailAddr).end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        should.exist(result.body);
        result.body.status.should.equal(200);
        result.body.code.should.equal('user.email.success');
        result.body.message.should.equal('Instructions to reset your password is sent by email');
        result.body.should.be.an('object');
        done();
      });
    });
  });

  describe('When an email is registered with social account', () => {
    it('sends an email to reset password', (done) => {
      nock(baseUrl).post('/transactional-email').reply(200, {});
      const mailAddr = { email: socialUserData.emailAddress };
      chai.request(app).post('/users/forgot-password').send(mailAddr).end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        should.exist(result.body);
        result.body.status.should.equal(200);
        result.body.code.should.equal('user.email.success');
        result.body.message.should.equal('Instructions to reset your password is sent by email');
        result.body.should.be.an('object');
        done();
      });
    });
  });

  it('gives 400 if email missing', (done) => {
    // eslint-disable-next-line no-underscore-dangle
    const obj = { token: faker.random.alphaNumeric(6), password: faker.internet.password() };
    chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.should.be.an('object');
      result.body.code.should.equal('user.missing.parameters');
      result.body.message.should.equal('Missing either email, token or password');
      done();
    });
  });

  it('gives 400 if token missing', (done) => {
    // eslint-disable-next-line no-underscore-dangle
    const obj = { email: 'test23@gmail.com', password: faker.internet.password() };
    chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.should.be.an('object');
      result.body.code.should.equal('user.missing.parameters');
      result.body.message.should.equal('Missing either email, token or password');
      done();
    });
  });

  it('gives 400 if password missing', (done) => {
    // eslint-disable-next-line no-underscore-dangle
    const obj = { email: 'test23@gmail.com', token: faker.random.alphaNumeric() };
    chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.should.be.an('object');
      result.body.code.should.equal('user.missing.parameters');
      result.body.message.should.equal('Missing either email, token or password');
      done();
    });
  });

  it('gives 400 if password is invalid', (done) => {
    // eslint-disable-next-line no-underscore-dangle
    const obj = { email: 'test23@gmail.com', token: faker.random.alphaNumeric(), password: '123' };
    chai.request(app).post('/users/reset-password').send(obj).end((err, result) => {
      if (err) done(err);
      result.should.have.status(400);
      should.exist(result.body);
      result.body.status.should.equal(400);
      result.body.should.be.an('object');
      result.body.code.should.equal('user.invalid.password');
      result.body.message.should.equal('Invalid format of the password.');
      done();
    });
  });
});
