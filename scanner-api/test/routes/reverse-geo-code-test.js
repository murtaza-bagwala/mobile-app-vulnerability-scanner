// TODO: FIX these with mocks
// const chai = require('chai');
// const chaiHttp = require('chai-http');

// const should = chai.should();
// const { expect } = chai;
// const app = require('../../app/server');


// chai.use(chaiHttp);

// describe('Reverse geo-code Service Tests', () => {
//   it('returns status as 400 if latitude or longitude does not exists', (done) => {
//     const geocode = {};

//     chai.request(app).post('/users/reverse-geo-code').send(geocode).end((err, result) => {
//       if (err) done(err);
//       result.should.have.status(400);
//       should.exist(result.body);
//       result.body.status.should.equal(400);
//       result.body.error.should.equal('Location not found.');
//       result.body.code.should.equal('user.not_found.location');
//       done();
//     });
//   });

//   it('returns status as 400 if latitude and longitude is empty .', (done) => {
//     const geocode = {
//       latitude: '',
//       longitude: '',
//     };

//     chai.request(app).post('/users/reverse-geo-code').send(geocode).end((err, result) => {
//       if (err) done(err);
//       result.should.have.status(500);
//       should.exist(result.error);
//       result.body.status.should.equal(500);
//       result.body.code.should.equal('error');
//       done();
//     });
//   });

//   it('gives 200 when coords are valid', (done) => {
//     const geocode = {
//       latitude: '40.4173',
//       longitude: '-82.9071',
//     };

//     chai.request(app).post('/users/reverse-geo-code').send(geocode).end((err, result) => {
//       if (err) done(err);
//       expect(result).to.have.status(200);
//       should.exist(result.body);
//       result.body.should.be.an('object');
//       expect(result.body.status).to.be.equal(200);
//       result.body.code.should.equal('user.valid.location_coords');
//       should.exist(result.body.state);
//       should.exist(result.body.state.name);
//       result.body.state.name.should.equal('Ohio');
//       should.exist(result.body.state.stusps);
//       result.body.state.stusps.should.equal('OH');
//       should.exist(result.body.country);
//       result.body.country.should.equal('US');
//       done();
//     });
//   });
// });
