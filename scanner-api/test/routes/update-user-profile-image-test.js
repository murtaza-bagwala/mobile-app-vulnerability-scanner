const chai = require('chai');
const chaiHttp = require('chai-http');

const jwt = require('jsonwebtoken');
const app = require('../../app/server');

const mongoDB = require('../../app/services/mongodb-service');
const User = require('../factories/user-factory');

chai.use(chaiHttp);

describe('Update User Profile Image Tests', () => {
  const user = User.create();
  let userId = '';
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection('users').insertOne(user, (err, result) => {
          userId = result.insertedId;
          done();
        });
      });
    });
  });

  it('returns status as 401 if no token is passed', (done) => {
    const userData = {};
    chai.request(app).put('/users/profile-image').send(userData).end((err, result) => {
      if (err) done(err);
      result.should.have.status(401);
      result.body.message.should.equal('Access denied. No token provided.');
      done();
    });
  });

  it('returns status as 400 if empty user data are passed', (done) => {
    const userData = {};
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile-image').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(404);
        result.body.message.should.equal('Profile image is missing.');
        result.body.code.should.equal('user.missing.profile_image');
        result.body.status.should.equal(404);
        done();
      });
  });

  it('returns status as 200 if user-profile image gets updated successfully', (done) => {
    const userData = {
      imageUrl: 'https://dailynumber-test-upload.s3.amazonaws.com/check23.png',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile-image').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.status.should.equal(204);
        done();
      });
  });

  it('returns status as 200 if user-profile removes the profile picture,profile updated successfully', (done) => {
    const userData = {
      imageUrl: '',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile-image').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.status.should.equal(204);
        done();
      });
  });
});
