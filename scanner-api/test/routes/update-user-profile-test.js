const chai = require('chai');
const chaiHttp = require('chai-http');

const jwt = require('jsonwebtoken');
const faker = require('faker');
const nock = require('nock');
const app = require('../../app/server');

const should = chai.should();

const baseUrl = process.env.SMTM_BASE_URL;

const mongoDB = require('../../app/services/mongodb-service');
const User = require('../factories/user-factory');

chai.use(chaiHttp);

describe('Update User Profile Tests', () => {
  const user = User.create();
  const kycVerifiedUser = User.create(null, 'Johnpass', true);
  const socialSignedUpUser = User.create(null, 'Johnpass1', true, 'socialId');
  const users = [user, kycVerifiedUser, socialSignedUpUser];
  let userId = '';
  let kycVerifiedUserId = '';
  let socialSignedUpUserId = '';
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection('users').insertMany(users, (err, result) => {
          userId = result.ops[0]._id;
          kycVerifiedUserId = result.ops[1]._id;
          socialSignedUpUserId = result.ops[2]._id;
          done();
        });
      });
    });
  });

  it('returns status as 401 if no token is passed', (done) => {
    const userData = {};
    chai.request(app).put('/users/profile').send(userData).end((err, result) => {
      result.should.have.status(401);
      result.body.message.should.equal('Access denied. No token provided.');
      done();
    });
  });

  it('returns status as 400 if user does not exist', (done) => {
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '1994-11-11',
    };
    const token = jwt.sign({ sub: faker.random.number }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(400);
        result.body.message.should.equal('Unable to update user profile');
        result.body.code.should.equal('user.updation.failed');
        done();
      });
  });

  it('returns status as 400 if empty user data are passed', (done) => {
    const userData = {

    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(400);
        result.body.message.should.equal('Unable to update user profile');
        result.body.code.should.equal('user.updation.failed');
        done();
      });
  });

  it('returns status as 400 if user is less than 13 years', (done) => {
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '2019-11-11',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(400);
        result.body.status.should.equal(400);
        result.body.message.should.equal('Invalid birth date is provided.');
        result.body.code.should.equal('user.invalid.birth_date');
        done();
      });
  });

  it('returns status as 400 if birth date format is not YYYY-MM-DD', (done) => {
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '12-04-2011',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(400);
        result.body.status.should.equal(400);
        result.body.message.should.equal('Invalid birth date is provided.');
        result.body.code.should.equal('user.invalid.birth_date');
        done();
      });
  });

  it('returns status as 400 if zipcode is invalid', (done) => {
    const zipCode = faker.address.zipCode('####');
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '1994-11-11',
      zipCode,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(400);
        result.body.status.should.equal(400);
        result.body.message.should.equal('Invalid Zipcode');
        result.body.code.should.equal('user.invalid.zipcode');
        done();
      });
  });

  it('should not update kyc fields if passed', (done) => {
    const text = faker.lorem.words(1);
    const firstName = faker.name.firstName();
    const lastName = faker.name.lastName();
    const userData = {
      firstName,
      lastName,
      username: faker.name.firstName,
      birthDate: '1994-11-11',
      accountVerified: text,
      needsManualKyc: text,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        const userUpdatedData = result.body.data;
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        userUpdatedData.firstName.should.equal(firstName);
        userUpdatedData.lastName.should.equal(lastName);
        userUpdatedData.accountVerified.should.not.equal(text);
        userUpdatedData.needsManualKyc.should.not.equal(text);
        done();
      });
  });

  it('returns status as 200 if user-profile gets updated successfully without zipcode', (done) => {
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '1994-11-11',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        done();
      });
  });

  it('returns status as 200 if user-profile gets updated successfully with zipcode', (done) => {
    const zipCode = faker.address.zipCode('#####');
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '1994-11-11',
      zipCode,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.data.zipCode.should.equal(zipCode);
        done();
      });
  });

  it('returns status as 200 if user-profile gets updated successfully with zipcode and without birthdate', (done) => {
    const zipCode = faker.address.zipCode('#####');
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      zipCode,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.data.zipCode.should.equal(zipCode);
        done();
      });
  });

  it('returns status as 500 if SMTM throws an error', (done) => {
    const zipCode = faker.address.zipCode('#####');
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      zipCode,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').replyWithError('Unable to update User');
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(500);
        should.exist(result.error);
        result.body.message.should.equal('Unable to update User');
        done();
      });
  });

  it('returns status as 200 if user-profile gets updated successfully with fullName ', (done) => {
    const zipCode = faker.address.zipCode('#####');
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      username: faker.name.firstName(),
      birthDate: '1991-07-10',
      zipCode,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.data.firstName.should.equal(userData.firstName);
        result.body.data.lastName.should.equal(userData.lastName);
        result.body.data.username.should.equal(userData.username);
        result.body.data.birthDate.should.equal(userData.birthDate);
        result.body.data.fullName.should.equal(`${userData.firstName} ${userData.lastName}`);
        result.body.data.zipCode.should.equal(zipCode);
        done();
      });
  });

  it('returns status as 403 if kyc verified user tries to update name or birthDate', (done) => {
    const userData = {
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
    };
    const token = jwt.sign({ sub: kycVerifiedUserId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(403);
        result.body.status.should.equal(403);
        result.body.message.should.equal('A validated user cannot edit name, birthdate or email');
        result.body.code.should.equal('user.updation.forbidden.kyc_verified');
        done();
      });
  });

  it('returns status as 200 if kyc verified user tries to update an email or username', (done) => {
    const username = faker.name.firstName();
    const emailAddress = faker.internet.email();
    const userData = {
      username,
      emailAddress,
    };
    const token = jwt.sign({ sub: kycVerifiedUserId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.data.emailAddress.should.equal(emailAddress);
        result.body.data.username.should.equal(username);
        done();
      });
  });

  it('returns status as 200 if unverified user updates email successfully', (done) => {
    const emailAddress = faker.internet.email();
    const userData = {
      emailAddress,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Profile updated successfully');
        result.body.code.should.equal('user.updated.profile');
        result.body.data.emailAddress.should.equal(emailAddress);
        done();
      });
  });

  it('returns status as 403 if user signed up using a social account', (done) => {
    const emailAddress = faker.internet.email();
    const userData = {
      emailAddress,
    };
    const token = jwt.sign({ sub: socialSignedUpUserId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    nock(baseUrl).patch('/users/XYSIA').reply(200, {});
    chai.request(app).put('/users/profile').set('Authorization', `Bearer ${token}`).send(userData)
      .end((err, result) => {
        result.should.have.status(403);
        result.body.status.should.equal(403);
        result.body.message.should.equal('A user signed up using social account cannot change an email');
        result.body.code.should.equal('user.updation.email.forbidden.social');
        done();
      });
  });
});
