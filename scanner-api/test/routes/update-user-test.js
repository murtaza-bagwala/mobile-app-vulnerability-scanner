const chai = require('chai');
const chaiHttp = require('chai-http');

const jwt = require('jsonwebtoken');
const app = require('../../app/server');
const User = require('../factories/user-factory');

// eslint-disable-next-line no-unused-vars
const should = chai.should();

const mongoDB = require('../../app/services/mongodb-service');

chai.use(chaiHttp);

describe('Update User Password Tests', () => {
  const user = User.create();
  let userId = '';
  before((done) => {
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection('users').insertOne(user, (err, result) => {
          userId = result.insertedId;
          done();
        });
      });
    });
  });

  it('returns status as 401 if no token is passed', (done) => {
    const password = {
      oldPassword: 'johnpass',
      newPassword: 'johnpass1',
    };
    chai.request(app).put('/users/password').send(password).end((err, result) => {
      result.should.have.status(401);
      result.body.message.should.equal('Access denied. No token provided.');
      done();
    });
  });

  it('returns status as 401 if incorrect token is passed', (done) => {
    const password = {
      oldPassword: 'johnpass',
      newPassword: 'johnpass1',
    };
    chai.request(app).put('/users/password').set('Authorization', 'Bearer x').send(password)
      .end((err, result) => {
        result.should.have.status(401);
        result.body.code.should.equal('user.invalid.token');
        done();
      });
  });

  it('returns status as 200 if password gets updated successfully', (done) => {
    const password = {
      oldPassword: 'Johnpass',
      newPassword: 'Johnpass1',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/password').set('Authorization', `Bearer ${token}`).send(password)
      .end((err, result) => {
        result.should.have.status(200);
        result.body.message.should.equal('Password Updated');
        done();
      });
  });

  it('returns status as 412 if old password and new passwords are same', (done) => {
    const password = {
      oldPassword: 'Johnpass1',
      newPassword: 'Johnpass1',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/password').set('Authorization', `Bearer ${token}`).send(password)
      .end((err, result) => {
        result.should.have.status(412);
        result.body.message.should.equal('New password is same as old password');
        done();
      });
  });

  it('returns status as 412 if old password does not match with the DB', (done) => {
    const password = {
      oldPassword: 'Johnpass2',
      newPassword: 'Johnpass2',
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).put('/users/password').set('Authorization', `Bearer ${token}`).send(password)
      .end((err, result) => {
        result.should.have.status(412);
        result.body.message.should.equal('User seems to have entered wrong old password');
        done();
      });
  });
});
