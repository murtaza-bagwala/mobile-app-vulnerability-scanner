const chai = require('chai');
const chaiHttp = require('chai-http');
const jwt = require('jsonwebtoken');

const should = chai.should();
const app = require('../../app/server');
const userFactory = require('../factories/user-factory');
const mongoDB = require('../../app/services/mongodb-service');
const { COLLECTIONS } = require('../../app/utils/constant');

chai.use(chaiHttp);

describe('User Profile Service Tests', () => {
  it('returns status as 401 if no token is passed', (done) => {
    const userDetail = {};
    chai.request(app).get('/users/profile').send(userDetail).end((err, result) => {
      if (err) done(err);
      result.should.have.status(401);
      should.exist(result.error);
      result.error.status.should.equal(401);
      done();
    });
  });

  it('returns status as 401 if incorrect token is passed', (done) => {
    const userDetail = {};
    chai.request(app).get('/users/profile').set('Authorization', 'Bearer x').send(userDetail)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(401);
        should.exist(result.error);
        result.error.status.should.equal(401);
        done();
      });
  });

  let userId = '';
  before((done) => {
    const user = userFactory.create();
    mongoDB.connect().then(() => {
      mongoDB.dbInstance().dropDatabase(() => {
        mongoDB.dbInstance().collection(COLLECTIONS.USERS).insertOne(user, (err, result) => {
          if (err) done(err);
          userId = result.insertedId;
          done();
        });
      });
    });
  });

  it('returns status as 500 if userID is incorrect ', (done) => {
    const userID = {
      id: `${userId}+${userId}`,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).get('/users/profile').set('Authorization', `Bearer ${token}`).query(userID)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(400);
        should.exist(result);
        should.exist(result.error);
        result.error.status.should.equal(400);
        done();
      });
  });

  it('returns status as 200 if user  exists and token is valid', (done) => {
    const userID = {
      id: `${userId}`,
    };
    const token = jwt.sign({ sub: userId }, process.env.SECRET_KEY, { expiresIn: '1h' });
    chai.request(app).get('/users/profile').set('Authorization', `Bearer ${token}`).query(userID)
      .end((err, result) => {
        if (err) done(err);
        result.should.have.status(200);
        should.exist(result.body);
        const response = result.body;
        response.status.should.equal(200);
        response.code.should.equal('success');
        should.exist(response.data);
        // eslint-disable-next-line no-underscore-dangle
        response.data._id.should.equal(`${userId}`);
        done();
      });
  });
});
