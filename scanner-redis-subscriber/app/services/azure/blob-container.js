const {
	Aborter,
	BlockBlobURL,
	ContainerURL,
	ServiceURL,
	SharedKeyCredential,
	StorageURL,
} = require("@azure/storage-blob");

const fs = require("fs");
const path = require("path");

if (process.env.NODE_ENV !== "production") {
	require("dotenv").config();
}

const STORAGE_ACCOUNT_NAME = process.env.AZURE_STORAGE_ACCOUNT_NAME;
const ACCOUNT_ACCESS_KEY = process.env.AZURE_STORAGE_ACCOUNT_ACCESS_KEY;
const CONTAINER_NAME = process.env.CONTAINER_NAME

const ONE_MEGABYTE = 1024 * 1024;
const FOUR_MEGABYTES = 4 * ONE_MEGABYTE;
const ONE_MINUTE = 60 * 1000;

// A helper method used to read a Node.js readable stream into string
async function streamToString(readableStream) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      readableStream.on("data", data => {
        chunks.push(data.toString());
      });
      readableStream.on("end", () => {
        resolve(chunks.join(""));
      });
      readableStream.on("error", reject);
    });
}

const  streamToLocalFile = async (readableStream, path) => {
  return new Promise((resolve, reject) => {
    let buffer = Buffer.from([]);
    readableStream.on("data", (data) => {
        buffer = Buffer.concat([buffer, data], buffer.length+data.length);//Add the data read to the existing buffer.
    });
    readableStream.on("end", () => {
        fs.writeFileSync(path, buffer);//Write buffer to local file.
        resolve(path);//Return that file path.  
    });
    readableStream.on("error", reject);
  });
}

exports.downloadBlob = async blobName => {
	 const containerName = CONTAINER_NAME;

	const credentials = new SharedKeyCredential(
		STORAGE_ACCOUNT_NAME,
		ACCOUNT_ACCESS_KEY
	);
  const pipeline = StorageURL.newPipeline(credentials);
	const serviceURL = new ServiceURL(
		`https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net`,
		pipeline
	);

	const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);
	const blockBlobURL = BlockBlobURL.fromContainerURL(containerURL, blobName);

	const aborter = Aborter.timeout(30 * ONE_MINUTE);

  const downloadResponse = await blockBlobURL.download(aborter, 0);
  console.log(downloadResponse)
	const downloadedContent = await streamToLocalFile(
		downloadResponse.readableStreamBody, `${__dirname}/${blobName}`
  );

  return `${__dirname}/${blobName}`;
};

