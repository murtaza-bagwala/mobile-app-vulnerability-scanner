const getRedisService = require("./redis");
const logger = require("../../config/winston-config");
const application = require("../models/application");
const report = require("../models/scan-report");
const appScanner = require("./app-scanner");
const dbConnect = require("./mongodb-service");
const mongoose = require("mongoose");
const dotenv = require('dotenv');
const VULNERABLE_STATUS = "fs-bar-red";

const envFile = process.env.NODE_ENV ? `.env.${process.env.NODE_ENV}` : ".env";
dotenv.config({ path: envFile });

dbConnect.connect();

const getApprovalStatus = scores => {
	return (
		Object.values(scores)
			.map(score => score.class)
			.filter(status => status === VULNERABLE_STATUS).length < 3
	);
};

const fetchAndUpdateScanStatuses = async () => {
	const appIds = await application.find({ approved: false }).select("appId");
	logger.info(`AppIs ${appIds} with length ${appIds.length}`);
	for (const app of appIds) {
		const scanId = await getRedisService().getScanId(app.id);
		logger.info(`scanId ${scanId}`);
		const result = await appScanner.scanResult(scanId);
		if (result.status === "finished") {
			const approved = getApprovalStatus(result.scores);
			logger.info(`Approval status for scanId ${approved}`);
			await application.updateOne(
				{ _id: mongoose.Types.ObjectId(app.id) },
				{ approved }
			);
			const reportResult = await report.create({
				description: JSON.stringify(result.data),
				applicationId: mongoose.Types.ObjectId(app.id)
			});
			logger.info(`Report created ${reportResult}`);
		}
	}

	return;
};

fetchAndUpdateScanStatuses();
