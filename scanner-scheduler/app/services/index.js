const getRedisService = require("./redis");
const logger = require("../../config/winston-config");
const application = require("../models/application");
const report = require("../models/scan-report");
const appScanner = require("./app-scanner");
const dbConnect = require("./mongodb-service");
const mongoose = require('mongoose');
const VULNERABLE_STATUS = "fs-bar-red";

dbConnect.connect();

const getApprovalStatus = (scores) => {
	return Object.values(scores)
		.map(score => score.class)
		.filter(status => status === VULNERABLE_STATUS).length < 3;
}

const fetchAndUpdateScanStatuses = async () => {

	const appIds = await application.find({ approved: false }).select("appId");
	console.log(appIds)
	for (const app of appIds) {
		const scanId = await getRedisService().getScanId(1);
		console.log(scanId)
		const result = await appScanner.scanResult(scanId);
		console.log(`${mongoose.Types.ObjectId(app.id)}`);
		if (result.status === "finished") {
			const approved = getApprovalStatus(result.scores);
			logger.info(`Approval status for scanId ${approved}`);
			await application.updateOne(
				{ _id: mongoose.Types.ObjectId(app.id) },
				{ approved }
			);
			const reportResult = await report.create({
				description: JSON.stringify(result.data),
				applicationId: mongoose.Types.ObjectId(app.id)
			});
			logger.info(`Report created ${reportResult}`)
		}
	}
}

fetchAndUpdateScanStatuses();
